/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => KindleCsvPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var import_obsidian2 = require("obsidian");
var import_obsidian3 = require("obsidian");
var DEFAULT_SETTINGS = {
  path: "/",
  separator: "_",
  iframe: true,
  highlight: "*** \\n \\n > [!quote] location \\n *highlight* \\n \\n",
  note: "**Note** \\n > note \\n \\n"
};
var KindleSettings = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h3", { text: "Settings: Kindle CSV Converter" });
    new import_obsidian2.Setting(containerEl).setName("Path for saving").setDesc("This is the path were your notes will be saved.").addDropdown((dropdown) => {
      let folders = [];
      for (let file of this.app.vault.getAllLoadedFiles()) {
        if (file instanceof import_obsidian3.TFolder) {
          folders.push(file);
        }
      }
      folders.forEach(function(value) {
        dropdown.addOption(value["path"], value["path"]);
      });
      dropdown.setValue(this.plugin.settings.path).onChange(async (value) => {
        this.plugin.settings.path = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(containerEl).setName("Separator").setDesc('This is how the file name will be formatted. Example: "Title of my book" is going to be "Title_of_my_book".').addText((text) => text.setPlaceholder('Default is "_"').setValue(this.plugin.settings.separator).onChange(async (value) => {
      this.plugin.settings.separator = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Show iframe").setDesc("Shows additional information of your Kindle book.").addToggle((text) => text.setValue(this.plugin.settings.iframe).onChange(async (value) => {
      this.plugin.settings.iframe = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Highlight").setDesc(`This represents how the highlight will be formatted. Default: ${DEFAULT_SETTINGS["highlight"]}`).addText((text) => text.setValue(this.plugin.settings.highlight).onChange(async (value) => {
      this.plugin.settings.highlight = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Note").setDesc(`This represents how the note will be formatted. Default: ${DEFAULT_SETTINGS["note"]}`).addText((text) => text.setValue(this.plugin.settings.note).onChange(async (value) => {
      this.plugin.settings.note = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Support me!" });
    const div = this.containerEl.createDiv("coffee");
    div.createEl("a", {
      href: "https://www.buymeacoffee.com/alvaro.cas"
    }).createEl("img", {
      attr: {
        src: "https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=\u2615&slug=alvaro.cas&button_colour=FFDD00&font_colour=000000&font_family=Inter&outline_colour=000000&coffee_colour=ffffff"
      }
    });
  }
};

// src/modal_read.ts
var import_obsidian4 = require("obsidian");
var import_obsidian5 = require("obsidian");
var import_obsidian6 = require("obsidian");
var fs = require("fs");
var readline = require("readline");
var Reader = class extends import_obsidian4.Modal {
  constructor(app, settings) {
    super(app);
    this.settings = settings;
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.createEl("h2", { text: "Kindle CSV to Obsidian", cls: "h-modal" });
    const divMain = contentEl.createDiv({ cls: "main-div" });
    const divIcon = divMain.createDiv({ cls: "file-up-div" });
    (0, import_obsidian6.setIcon)(divIcon, "file-up");
    divIcon.createEl("div", { text: "Choose your file", cls: "div-modal" });
    divIcon.onclick = (_this) => {
      this.createFile();
    };
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  createFile() {
    let input = activeDocument.createElement("input");
    input.type = "file";
    input.accept = ".csv";
    input.onchange = (_this) => {
      const stream = fs.createReadStream(input.files[0]["path"]);
      const reader = readline.createInterface({ input: stream });
      let data = [];
      reader.on("line", (row) => {
        let line = row.split(",");
        let result = line.splice(0, 3);
        result.push(line.join(","));
        data.push(result);
      });
      reader.on("close", () => {
        let name = data[1][0].replace(/[&\/\\#,+()$~%.'":*?<>{}]/g, "");
        name = name.replace(/ /g, this.settings.separator);
        let markdown;
        if (this.settings.iframe == true) {
          markdown = `
<iframe
           height=600px
           width=100%
           src=${data[4][0]}></iframe> 
`;
        } else {
          markdown = `${data[0][0].replace(/"/g, "")} ${data[1][0].replace(/"/g, "")} ${data[2][0].replace(/"/g, "")} 
`;
        }
        for (let i = 8; i < data.length; i++) {
          if (data[i][0] == '"Note"') {
            let note = this.settings.note.replace("note", data[i][3].replace(/"/g, ""));
            note = note.replace(/\\n/g, "\n");
            markdown += note;
          } else {
            let highlight = this.settings.highlight.replace("highlight", data[i][3]);
            highlight = highlight.replace(/\\n/g, "\n");
            highlight = highlight.replace("location", data[i][1].replace(/"/g, ""));
            markdown += highlight;
          }
        }
        this.app.vault.create(`${this.settings.path}/${name}.md`, markdown).then(() => {
          new import_obsidian5.Notice(`Your notes were succesfully created.                      Path: ${this.settings.path}`);
        }).catch((err) => {
          console.log(err);
          new import_obsidian5.Notice("File already exists. Please delete and try again.");
        });
      });
    };
    input.click();
    this.close();
  }
};

// main.ts
var KindleCsvPlugin = class extends import_obsidian7.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("library", "Kindle CSV Converter", () => {
      new Reader(this.app, this.settings).open();
    });
    this.addCommand({
      id: "choose-file",
      name: "Choose File",
      checkCallback: (checking) => {
        const view = this.app.workspace.getActiveViewOfType(MarkdownView);
        if (view) {
          if (!checking) {
            new Reader(this.app, this.settings).open();
          }
          return true;
        }
        return false;
      }
    });
    this.addSettingTab(new KindleSettings(this.app, this));
  }
  onunload() {
    console.log("unloading plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
